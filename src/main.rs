use clap::{arg, Command};
use gcode_converter::{configuration, replace_movement_cmd::ReplaceMovementCmd};

fn main() {
    let matches = Command::new("GCode converter")
        .version("0.0")
        .author("Lasse Bloch. <lassebloch@gmail.com>")
        .about("Converts gcode generated by Inkscape into something that Klipper will accept")
        .arg(
            arg!(-r --replace_gcode ... "Replace all G-codes with the format G0X with GX")
                .required(false),
        )
        .arg(arg!(-f --input_file <FILE> "Original G-code file"))
        .arg(arg!(-o --output_file <FILE> "Output file").required(false))
        .arg(
            arg!(-z --z_replace ... "Replace Z X with Y")
                .takes_value(true)
                .number_of_values(2),
        )
        .get_matches();

    let replace_gcode = matches.is_present("replace_gcode");
    let input_file = matches.value_of("input_file").expect("required");
    let input_file = String::from(input_file);
    let output_file = matches.value_of("output_file");
    let mut movement_values_to_be_replaced = Vec::new();
    let mut z_replace = matches
        .values_of("z_replace")
        .map(|vals| vals.collect::<Vec<_>>())
        .unwrap_or_default();

    if !z_replace.is_empty() {
        movement_values_to_be_replaced.push("Z");
        movement_values_to_be_replaced.append(&mut z_replace);
        drop(z_replace);
    }

    let z_replace_cmd = ReplaceMovementCmd::new(movement_values_to_be_replaced);
    
    println!("{:?}", z_replace_cmd);

    let conf = configuration::Configuration::new(replace_gcode, input_file, output_file);

    gcode_converter::convert_file(conf);
}
